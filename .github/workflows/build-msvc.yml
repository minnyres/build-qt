name: Build with MSVC 

on:
  push:

jobs:
  build-qtbase:
    name: Build
    runs-on: windows-latest
    env:
      qt_path: "${{ github.workspace }}/qt-msvc-x64"
      qt_version: "6.9.0"
      llvm_version: "20.1.0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup devcmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Install build tools
        run: |
          choco install ninja

      - name: Setup a new (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11 # Always specify the specific _version_ of the
                                  # action you need, `v11` in this case to stay up
                                  # to date with fixes on the v11 branch
        with:
          vcpkgGitCommitId: 'd5ec528843d29e3a52d745a64b469f810b2cedbf'

      - name: Install dependencies from vcpkg
        run: |
          # clear buildtrees after each package installation to reduce disk space requirements
          $packages = `
            "openssl:x64-windows-release",
            "protobuf:x64-windows-release"
          ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe upgrade `
            --no-dry-run
          ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe install `
            --clean-after-build `
            $packages

      - name: Build Qt
        run: |
          $env:path += ";${{ env.RUNVCPKG_VCPKG_ROOT }}\installed\x64-windows-release\tools\protobuf"
          aria2c https://download.qt.io/development_releases/prebuilt/libclang/qt/libclang-llvmorg-${{ env.llvm_version }}-windows-vs2022_64.7z
          7z x libclang-llvmorg-${{ env.llvm_version }}-windows-vs2022_64.7z
          aria2c https://download.qt.io/official_releases/qt/6.9/${{ env.qt_version }}/single/qt-everywhere-src-${{ env.qt_version }}.zip
          7z x qt-everywhere-src-${{ env.qt_version }}.zip
          cd qt-everywhere-src-${{ env.qt_version }}
          ./configure FEATURE_clang=ON -opensource -confirm-license -nomake tests -nomake examples `
            -release -schannel -openssl-runtime -no-icu -skip webengine `
            -prefix "${{ env.qt_path }}" `
            -- -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-release -DCMAKE_PREFIX_PATH="${{ github.workspace }}/libclang"
          cmake --build . --parallel
          cmake --install . --strip
          mv ${{ env.RUNVCPKG_VCPKG_ROOT }}/installed/x64-windows-release ${{ env.qt_path }}/third_party_libraries

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qt-msvc-x64
          path: "${{ env.qt_path }}"

  build-qtwebengine:
    name: Build
    runs-on: windows-latest
    needs: build-qtbase
    env:
      qt_path: "${{ github.workspace }}/qt-msvc-arm64"
      qt_version: "6.9.0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup devcmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Download temp artifacts
        uses: actions/download-artifact@v4

      - name: Install build tools
        run: |
          choco install ninja
          pip install html5lib 

      - name: Build Qt Webengine
        run: |
          $env:path += ";$pwd/gnuwin32/bin;${{ env.qt_path }}/bin"
          aria2c https://download.qt.io/development_releases/gnuwin32/gnuwin32.zip
          7z x gnuwin32.zip
          aria2c https://download.qt.io/official_releases/qt/6.9/${{ env.qt_version }}/submodules/qtwebengine-everywhere-src-${{ env.qt_version }}.zip
          7z x qtwebengine-everywhere-src-${{ env.qt_version }}.zip
          mkdir d:/build
          cd d:/build
          cmake -DCMAKE_INSTALL_PREFIX="${{ env.qt_path }}" -DCMAKE_BUILD_TYPE=Release ${{ github.workspace }}/qtwebengine-everywhere-src-${{ env.qt_version }}
          cmake --build . --parallel
          cmake --install . --strip